version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: rss-postgres-prod
    environment:
      - POSTGRES_DB=rssintel
      - POSTGRES_USER=rss
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - rss-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rss -d rssintel"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rss-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - rss-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Weaviate Vector Database
  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.26.3
    container_name: rss-weaviate-prod
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - rss-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: rss-backend-prod
    environment:
      - DATABASE_URL=postgresql://rss:${POSTGRES_PASSWORD:-changeme_production}@postgres:5432/rssintel
      - WEAVIATE_URL=http://weaviate:8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRESHRSS_BASE_URL=http://freshrss
      - RSSHUB_BASE_URL=http://rsshub:1200
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SCHEDULER_ENABLED=true
      - CONTENT_EXTRACTION_ENABLED=true
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    volumes:
      - /data/image-cache:/data/image-cache
      - backend_logs:/app/logs
    networks:
      - rss-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Web Application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
    container_name: rss-web-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://${DOMAIN:-localhost}/api
      - BACKEND_URL=http://backend:8000
    networks:
      - rss-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: rss-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - /data/image-cache:/data/image-cache:ro
    networks:
      - rss-network
    depends_on:
      - web
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # FreshRSS (Optional RSS Aggregator)
  freshrss:
    image: freshrss/freshrss:latest
    container_name: rss-freshrss-prod
    environment:
      - CRON_MIN=*/15
      - TZ=UTC
    volumes:
      - freshrss_data:/var/www/FreshRSS/data
      - freshrss_extensions:/var/www/FreshRSS/extensions
    networks:
      - rss-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # RSSHub (Optional RSS Proxy)
  rsshub:
    image: diygod/rsshub:latest
    container_name: rss-rsshub-prod
    environment:
      - NODE_ENV=production
      - CACHE_TYPE=redis
      - REDIS_URL=redis://redis:6379/1
      - PUPPETEER_WS_ENDPOINT=
    networks:
      - rss-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Monitoring: Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rss-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - rss-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    profiles:
      - monitoring

  # Monitoring: Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: rss-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - rss-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    profiles:
      - monitoring

networks:
  rss-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  freshrss_data:
    driver: local
  freshrss_extensions:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local