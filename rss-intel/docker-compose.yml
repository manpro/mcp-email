version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: rss-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: rss-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rss}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-rssintel}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ops/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rss}"]
      interval: 10s
      timeout: 5s
      retries: 5

  freshrss:
    image: freshrss/freshrss:latest
    container_name: rss-freshrss
    environment:
      TZ: Europe/Stockholm
      CRON_MIN: '*/10'
      FRESHRSS_INSTALL: |
        --default-user ${FRESHRSS_ADMIN_USER:-admin}
        --db-type pgsql
        --db-host postgres
        --db-user ${POSTGRES_USER:-rss}
        --db-password ${POSTGRES_PASSWORD:-changeme}
        --db-base ${POSTGRES_DB:-rssintel}
        --db-prefix freshrss_
        --api-enabled
        --base-url http://localhost:8081
    volumes:
      - freshrss_data:/var/www/FreshRSS/data
      - freshrss_extensions:/var/www/FreshRSS/extensions
    ports:
      - "8081:80"
    networks:
      - internal
    dns:
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy

  rsshub:
    image: diygod/rsshub:latest
    container_name: rss-rsshub
    environment:
      NODE_ENV: production
      CACHE_TYPE: memory
      CACHE_EXPIRE: 600
      REQUEST_TIMEOUT: 10000
    ports:
      - "1200:1200"
    networks:
      - internal
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rss-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-rss}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-rssintel}
      FRESHRSS_BASE_URL: ${FRESHRSS_BASE_URL:-http://freshrss}
      FRESHRSS_API_USER: ${FRESHRSS_API_USER:-ai}
      FRESHRSS_API_PASS: ${FRESHRSS_API_PASS:-strongpassword}
      RSSHUB_BASE_URL: http://rsshub:1200
      BACKEND_PORT: ${BACKEND_PORT:-8000}
      SCORING_HALF_LIFE_HOURS: ${SCORING_HALF_LIFE_HOURS:-36}
      SCORING_STAR_THRESHOLD: ${SCORING_STAR_THRESHOLD:-80}
      SCORING_INTEREST_THRESHOLD: ${SCORING_INTEREST_THRESHOLD:-60}
      SCHEDULER_ENABLED: ${SCHEDULER_ENABLED:-true}
      IMAGE_PROXY_CACHE_DIR: /data/image-cache
      IMAGE_PROXY_MAX_BYTES: ${IMAGE_PROXY_MAX_BYTES:-5242880}
      IMAGE_PROXY_TIMEOUT_SEC: ${IMAGE_PROXY_TIMEOUT_SEC:-8}
      IMAGE_PROXY_CONNECT_SEC: ${IMAGE_PROXY_CONNECT_SEC:-3}
      IMAGE_PROXY_USER_AGENT: ${IMAGE_PROXY_USER_AGENT:-RSSIntelBot/1.0}
      IMAGE_MIN_WIDTH: ${IMAGE_MIN_WIDTH:-320}
      IMAGE_MIN_HEIGHT: ${IMAGE_MIN_HEIGHT:-180}
      IMAGE_ENABLE_REVALIDATION: ${IMAGE_ENABLE_REVALIDATION:-true}
      IMAGE_REVALIDATE_AFTER_HOURS: ${IMAGE_REVALIDATE_AFTER_HOURS:-168}
      WEAVIATE_URL: http://weaviate:8080
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-1000}
      OPENAI_TEMPERATURE: ${OPENAI_TEMPERATURE:-0.1}
    volumes:
      - ./config:/app/config
      - image_cache:/data/image-cache
    ports:
      - "8000:8000"
    networks:
      - internal
    depends_on:
      - postgres
      - freshrss
      - rsshub
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: rss-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      VITE_API_URL: http://localhost:8000
      BACKEND_URL: http://backend:8000
      NODE_ENV: development
    networks:
      - internal
    depends_on:
      - backend
    volumes:
      - ./web:/app
      - /app/node_modules
    command: npm run dev

  nginx:
    build:
      context: ./nginx
    container_name: rss-nginx
    ports:
      - "3001:80"
      - "3002:443"
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    environment:
      - SSL_DOMAIN=${SSL_DOMAIN:-localhost}
    networks:
      - internal
    depends_on:
      - web
      - backend

  certbot:
    build:
      context: ./certbot
    container_name: rss-certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    environment:
      - SSL_DOMAIN=${SSL_DOMAIN:-localhost}
      - SSL_EMAIL=${SSL_EMAIL:-admin@example.com}
      - SSL_STAGING=${SSL_STAGING:-1}
    networks:
      - internal
    depends_on:
      - nginx
    profiles:
      - ssl

  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.26.3
    container_name: rss-weaviate
    environment:
      CLUSTER_HOSTNAME: 'node1'
      QUERY_DEFAULTS_LIMIT: 20
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'backup-filesystem,offload-s3'
      BACKUP_FILESYSTEM_PATH: '/var/lib/weaviate/backups'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      LOG_LEVEL: 'info'
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8095:8080"
      - "50051:50051"
    networks:
      - internal
    restart: unless-stopped

networks:
  internal:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/data/rss-intel/postgres
  freshrss_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/data/rss-intel/freshrss
  freshrss_extensions:
  image_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/data/rss-intel/images
  redis_data:
    driver: local
  weaviate_data:
  certbot_conf:
  certbot_www: