#!/usr/bin/env python3
"""
Test RSS Intelligence MANDATORY proxy mode (NO FALLBACK)
"""
import sys
import os

# L√§gg till backend path s√• vi kan importera moduler
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_mandatory_proxy_mode():
    """Test att proxy √§r MANDATORY utan fallback"""
    print("üß™ RSS Intelligence MANDATORY Proxy Test")
    print("=" * 50)
    print("üö´ INGEN FALLBACK TILL√ÖTEN - Proxy eller STOPP!")
    print("=" * 50)
    
    # Test 1: Kontrollera att PROXY_MANDATORY √§r satt
    print("\n1Ô∏è‚É£ Kontrollerar MANDATORY proxy-konfiguration...")
    
    proxy_enabled = os.getenv('PROXY_ENABLED', 'false').lower() == 'true'
    proxy_mandatory = os.getenv('PROXY_MANDATORY', 'false').lower() == 'true'
    http_proxy = os.getenv('HTTP_PROXY')
    alert_email = os.getenv('ALERT_EMAIL')
    
    print(f"   PROXY_ENABLED: {proxy_enabled}")
    print(f"   PROXY_MANDATORY: {proxy_mandatory}")
    print(f"   HTTP_PROXY: {http_proxy}")
    print(f"   ALERT_EMAIL: {alert_email}")
    
    if not all([proxy_enabled, proxy_mandatory, http_proxy, alert_email]):
        print("   ‚ùå KONFIGURATION SAKNAS!")
        return False
    else:
        print("   ‚úÖ MANDATORY proxy korrekt konfigurerad")
    
    # Test 2: Test SMTP-konfiguration
    print("\n2Ô∏è‚É£ Testar SMTP f√∂r proxy failure alerts...")
    try:
        from app.notification_utils import test_smtp_connection
        if test_smtp_connection():
            print("   ‚úÖ SMTP fungerar - kan skicka alerts")
        else:
            print("   ‚ùå SMTP fungerar inte - inga alerts kan skickas")
            return False
    except Exception as e:
        print(f"   ‚ùå SMTP-test fel: {e}")
        return False
    
    # Test 3: Test proxy-anslutning
    print("\n3Ô∏è‚É£ Testar MANDATORY proxy-anslutning...")
    try:
        from app.proxy_utils import test_proxy_connection
        if test_proxy_connection():
            print("   ‚úÖ Proxy fungerar - RSS Intelligence kan k√∂ra")
            print("   üåê All trafik g√•r via 95.216.172.130")
        else:
            print("   ‚ùå Proxy fungerar inte - RSS Intelligence ST√ÑNGS AV")
            print("   üìß Email-alert b√∂r skickas...")
            return False
    except Exception as e:
        print(f"   ‚ùå Proxy-test fel: {e}")
        return False
    
    # Test 4: Test httpx client creation
    print("\n4Ô∏è‚É£ Testar MANDATORY httpx client creation...")
    try:
        from app.proxy_utils import create_httpx_client
        with create_httpx_client(timeout=10) as client:
            response = client.get('http://httpbin.org/ip')
            if response.status_code == 200:
                ip_data = response.json()
                ip = ip_data.get('origin', 'unknown')
                print(f"   ‚úÖ HTTP client fungerar via IP: {ip}")
                if ip == "95.216.172.130":
                    print("   üéâ PERFEKT: Trafik g√•r via Hetzner!")
                else:
                    print(f"   ‚ö†Ô∏è VARNING: F√∂rv√§ntad IP 95.216.172.130, fick {ip}")
                    return False
            else:
                print(f"   ‚ùå HTTP request misslyckades: {response.status_code}")
                return False
    except SystemExit as e:
        print("   üö´ SystemExit triggered - RSS Intelligence skulle st√§ngas av!")
        print("   ‚úÖ KORREKT: Ingen fallback sker!")
        return True  # Detta √§r f√∂rv√§ntat beteende
    except Exception as e:
        print(f"   ‚ùå HTTP client test fel: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ ALLA MANDATORY PROXY TESTER LYCKADES!")
    print("‚úÖ RSS Intelligence konfigurerad f√∂r ENDAST proxy-drift")
    print("üö´ INGEN FALLBACK - proxy eller stopp!")
    print("üìß Email alerts aktiverade f√∂r proxy failures")
    print("=" * 50)
    return True


def test_proxy_failure_simulation():
    """Simulera proxy-fel f√∂r att testa email alerts"""
    print("\n" + "=" * 50)
    print("üß™ BONUS: Proxy Failure Simulation Test")
    print("=" * 50)
    
    try:
        from app.notification_utils import send_proxy_failure_alert
        print("üìß Skickar test proxy failure alert...")
        success = send_proxy_failure_alert(
            "TEST SIMULATION: Proxy connection timeout to 10.8.0.1:3128", 
            attempt_count=999
        )
        if success:
            print("‚úÖ Test alert skickad!")
            print(f"üì¨ Kontrollera email: {os.getenv('ALERT_EMAIL')}")
        else:
            print("‚ùå Test alert misslyckades")
        return success
    except Exception as e:
        print(f"‚ùå Test alert fel: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ Startar RSS Intelligence MANDATORY proxy test...")
    
    success = test_mandatory_proxy_mode()
    
    if success:
        # K√∂r bonus test f√∂r email simulation
        test_proxy_failure_simulation()
    
    print(f"\n{'‚úÖ RESULTAT: ALLA TESTER OK' if success else '‚ùå RESULTAT: VISSA TESTER MISSLYCKADES'}")
    sys.exit(0 if success else 1)